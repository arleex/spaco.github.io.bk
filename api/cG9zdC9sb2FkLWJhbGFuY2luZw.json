{"title":"Load balancing","date":"2019-09-18T00:00:00.000Z","link":"post/load-balancing","tags":["server"],"categories":["program"],"updated":"2019-09-18T00:00:00.000Z","content":"<h2 id=\"介绍\">介绍<a href=\"post/load-balancing#介绍\"></a></h2><p>负载均衡，是现代计算机领域的基础服务之一。其基本原理是通过运行在前面的负载均衡服务，按照指定的负载均衡算法，将流量分配到后端服务集群上，从而为系统提供横向扩展的能力。以此来分散压力的一种架构方式。</p>\n<p>负载均衡服务一般都会有内外网隔离、健康检查等功能，从而提高系统的安全性和可用性。</p>\n<h2 id=\"Key-Words\">Key Words<a href=\"post/load-balancing#Key-Words\"></a></h2><ul>\n<li><p>负载均衡器</p>\n<p>将用户访问的请求，根据负载均衡算法，分发到集群中的一台处理服务器。</p>\n</li>\n<li><p>Load balancing ： 负载均衡</p>\n</li>\n<li><p>集群（Cluster）</p>\n<p>将同一应用部署到多台机器上，组成处理集群，接收负载均衡设备分发的请求，进行处理，并返回相应数据。</p>\n</li>\n<li><p>OSI</p>\n</li>\n<li><p>纵向扩展 （Scale Up）</p>\n</li>\n<li><p>横向扩展 （Scale Out） </p>\n</li>\n</ul>\n<h2 id=\"场景\">场景<a href=\"post/load-balancing#场景\"></a></h2><p>系统的扩展可分为纵向（垂直）扩展和横向（水平）扩展。纵向扩展，是从单机的角度通过增加硬件处理能力，比如CPU处理能力，内存容量，磁盘等方面，实现服务器处理能力的提升，不能满足大型分布式系统（网站），大流量，高并发，海量数据的问题。因此需要采用横向扩展的方式，通过添加机器来满足大型网站服务的处理能力。比如：一台机器不能满足，则增加两台或者多台机器，共同承担访问压力。这就是典型的集群和负载均衡架构</p>\n<h3 id=\"没有负载均衡的-web-架构\">没有负载均衡的 web 架构<a href=\"post/load-balancing#没有负载均衡的-web-架构\"></a></h3><p><img src=\"https://spaco.oss-cn-hangzhou.aliyuncs.com/load-balancing/no-load-balancing.jpg\" alt=\"\" class=\"article-img\"></p>\n<p>在这里用户是直连到 web 服务器，如果这个服务器宕机了，那么用户自然也就没办法访问了。另外，如果同时有很多用户试图访问服务器，超过了其能处理的极限，就会出现加载速度缓慢或根本无法连接的情况。</p>\n<h3 id=\"使用负载均衡的-web-架构\">使用负载均衡的 web 架构<a href=\"post/load-balancing#使用负载均衡的-web-架构\"></a></h3><p>而通过在后端引入一个负载均衡器和至少一个额外的 web 服务器，可以缓解这个故障。通常情况下，所有的后端服务器会保证提供相同的内容，以便用户无论哪个服务器响应，都能收到一致的内容。</p>\n<p><img src=\"https://spaco.oss-cn-hangzhou.aliyuncs.com/load-balancing/load-balancing.jpg\" alt=\"\" class=\"article-img\"></p>\n<p>从图里可以看到，用户访问负载均衡器，再由负载均衡器将请求转发给后端服务器。在这种情况下，单点故障现在转移到负载均衡器上了。这里又可以通过引入负载均衡器集群来缓解。</p>\n<h3 id=\"负载均衡器集群\">负载均衡器集群<a href=\"post/load-balancing#负载均衡器集群\"></a></h3><p><img src=\"https://spaco.oss-cn-hangzhou.aliyuncs.com/load-balancing/load-balancing-cluster.jpg\" alt=\"\" class=\"article-img\"></p>\n<h2 id=\"优点\">优点<a href=\"post/load-balancing#优点\"></a></h2><ul>\n<li><p>流量分发 : 提高应用处理性能（增加吞吐量，加强网络处理能力）</p>\n<p>这个是负载均衡服务的核心功能，作为统一的流量入口，负载均衡服务会把流量分发到后端的多个节点上，从而实现集群的横向扩展。当需要扩容时，只需要在负载均衡服务后面加入新的节点就可以了，而不用改变入口。</p>\n</li>\n<li><p>系统高可用 : 故障转移</p>\n<p>通过加入后端多个节点，可以显著地提高服务的可用性。而且负载均衡服务一般会集成健康检查功能，在后端节点出现异常时会把请求转发到健康的节点上去，从而实现异常的自动处理。</p>\n</li>\n<li><p>在线扩容/缩容 : 提供网站伸缩性（扩展性) </p>\n<p>高峰扩容，低峰缩容</p>\n</li>\n</ul>\n<h2 id=\"负载均衡器可以处理什么样的请求？\">负载均衡器可以处理什么样的请求？<a href=\"post/load-balancing#负载均衡器可以处理什么样的请求？\"></a></h2><p>负载均衡器的管理员能主要为下面四种主要类型的请求设置转发规则：</p>\n<ul>\n<li>HTTP</li>\n<li>HTTPS</li>\n<li>TCP</li>\n<li>UDP</li>\n</ul>\n<h2 id=\"负载均衡器如何选择要转发的后端服务器？\">负载均衡器如何选择要转发的后端服务器？<a href=\"post/load-balancing#负载均衡器如何选择要转发的后端服务器？\"></a></h2><p>负载均衡器一般根据两个因素来决定要将请求转发到哪个服务器。首先，确保所选择的服务器能够对请求做出响应，然后根据预先配置的规则从健康服务器池（healthy pool）中进行选择。</p>\n<p>因为，负载均衡器应当只选择能正常做出响应的后端服务器，因此就需要有一种判断后端服务器是否「健康」的方法。为了监视后台服务器的运行状况，运行状态检查服务会定期尝试使用转发规则定义的协议和端口去连接后端服务器。如果，服务器无法通过健康检查，就会从池中剔除，保证流量不会被转发到该服务器，直到其再次通过健康检查为止。</p>\n<h2 id=\"原理与实现\">原理与实现<a href=\"post/load-balancing#原理与实现\"></a></h2><p>任何的负载均衡技术都要想办法建立某种一对多的映射机制：一个请求的入口映射到多个处理请求的节点，从而实现分而治之（Divide and Conquer）。<br>这种映射机制使得多个物理存在对外体现为一个虚拟的整体，对服务的请求者屏蔽了内部的结构。<br>采用不同的机制建立映射关系，可以形成不同的负载均衡技术，常见的包括：</p>\n<ul>\n<li>DNS轮询</li>\n<li>CDN</li>\n<li>IP负载均衡</li>\n</ul>\n<h3 id=\"DNS轮询\">DNS轮询<a href=\"post/load-balancing#DNS轮询\"></a></h3><p>[协议层】DNS域名解析负载均衡 </p>\n<p>原理：<strong>在DNS服务器上配置多个域名对应IP的记录</strong>。例如一个域名<a href=\"http://www.baidu.com对应一组web服务器IP地址，域名解析时经过DNS服务器的算法将一个域名请求分配到合适的真实服务器上。\" target=\"_blank\" rel=\"noopener\">www.baidu.com对应一组web服务器IP地址，域名解析时经过DNS服务器的算法将一个域名请求分配到合适的真实服务器上。</a> </p>\n<p>DNS轮询是最简单的负载均衡方式。以域名作为访问入口，通过配置多条DNS A记录使得请求可以分配到不同的服务器。<br>DNS轮询没有快速的健康检查机制，而且只支持WRR的调度策略导致负载很难“均衡”，通常用于要求不高的场景。并且DNS轮询方式直接将服务器的真实地址暴露给用户，不利于服务器安全。</p>\n<h3 id=\"CDN\">CDN<a href=\"post/load-balancing#CDN\"></a></h3><p>CDN（Content Delivery Network，内容分发网络）。通过发布机制将内容同步到大量的缓存节点，并在DNS服务器上进行扩展，找到里用户最近的缓存节点作为服务提供节点。<br>因为很难自建大量的缓存节点，所以通常使用CDN运营商的服务。目前国内的服务商很少，而且按流量计费，价格也比较昂贵。</p>\n<h3 id=\"IP负载均衡\">IP负载均衡<a href=\"post/load-balancing#IP负载均衡\"></a></h3><p>IP负载均衡是基于特定的TCP/IP技术实现的负载均衡。</p>\n<p>IP负载均衡可以使用硬件设备，也可以使用软件实现。硬件设备的主要产品是F5-BIG-IP-GTM（简称F5)，<code>软件产品主要有LVS、HAProxy、NginX</code>。其中LVS、HAProxy可以工作在4-7层，NginX工作在7层。关于三者的简单对比，可以参考<a href=\"http://localhost:4000/2012/10/16/weblayer_nginx_keepalived.html#2.3 负载均衡器选型-ref\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>硬件负载均衡设备可以将核心部分做成芯片，性能和稳定性更好，而且商用产品的可管理性、文档和服务都比较好。</p>\n<p>软件负载均衡通常是开源软件。自由度较高，但学习成本和管理成本会比较大。</p>\n<h2 id=\"实现\">实现<a href=\"post/load-balancing#实现\"></a></h2><h2 id=\"实现方式\">实现方式<a href=\"post/load-balancing#实现方式\"></a></h2><ul>\n<li><p>http重定向</p>\n</li>\n<li><p>DNS负载均衡</p>\n</li>\n<li><p>反向代理负载均衡</p>\n</li>\n<li><p>IP负载均衡(LVS-NAT)</p>\n</li>\n<li><p>直接路由(LVS-DR)</p>\n</li>\n<li><p>IP 隧道</p>\n</li>\n</ul>\n<h2 id=\"常用案例\">常用案例<a href=\"post/load-balancing#常用案例\"></a></h2><ul>\n<li>NginX + keepalive</li>\n<li>Spring Cloud Ribbon</li>\n<li>Kong</li>\n<li>Dubbo</li>\n</ul>\n<h2 id=\"注意点\">注意点<a href=\"post/load-balancing#注意点\"></a></h2><ul>\n<li>健康检查</li>\n</ul>\n<h2 id=\"负载均衡算法\">负载均衡算法<a href=\"post/load-balancing#负载均衡算法\"></a></h2><p>更详细的负载均衡算法请参考<a href=\"\">这里</a></p>\n<h3 id=\"Round-Robin-（轮询）\">Round Robin （轮询）<a href=\"post/load-balancing#Round-Robin-（轮询）\"></a></h3><h3 id=\"Weighted-Round-Robin-（加权轮询）\">Weighted Round Robin （加权轮询）<a href=\"post/load-balancing#Weighted-Round-Robin-（加权轮询）\"></a></h3><h3 id=\"Random（随机）\">Random（随机）<a href=\"post/load-balancing#Random（随机）\"></a></h3><h3 id=\"Hash-（哈希）\">Hash （哈希）<a href=\"post/load-balancing#Hash-（哈希）\"></a></h3><h3 id=\"Least-Connection-（最小连接数）\">Least Connection （最小连接数）<a href=\"post/load-balancing#Least-Connection-（最小连接数）\"></a></h3><h3 id=\"Least-Response-Time（最短响应时间）\">Least Response Time（最短响应时间）<a href=\"post/load-balancing#Least-Response-Time（最短响应时间）\"></a></h3><h3 id=\"IP-Hash（Source-Hash）\">IP Hash（Source Hash）<a href=\"post/load-balancing#IP-Hash（Source-Hash）\"></a></h3><p>### </p>\n<h2 id=\"常用\">常用<a href=\"post/load-balancing#常用\"></a></h2><ul>\n<li>Round Robin （轮询）</li>\n<li>Weighted Round Robin （加权轮询）</li>\n</ul>\n<h2 id=\"引用\">引用<a href=\"post/load-balancing#引用\"></a></h2><ul>\n<li><a href=\"https://blog.csdn.net/zhoudaxia/article/details/23672319\" target=\"_blank\" rel=\"noopener\">Web负载均衡的几种实现方式</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/61776638\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/61776638</a></li>\n</ul>\n","next":{"title":"Spring Cloud Ribbon","link":"post/spring-cloud-ribbon"},"plink":"https://spaco.github.io/post/load-balancing/","toc":[{"title":"介绍","id":"介绍","index":"1"},{"title":"Key Words","id":"Key-Words","index":"2"},{"title":"场景","id":"场景","index":"3","children":[{"title":"没有负载均衡的 web 架构","id":"没有负载均衡的-web-架构","index":"3.1"},{"title":"使用负载均衡的 web 架构","id":"使用负载均衡的-web-架构","index":"3.2"},{"title":"负载均衡器集群","id":"负载均衡器集群","index":"3.3"}]},{"title":"优点","id":"优点","index":"4"},{"title":"负载均衡器可以处理什么样的请求？","id":"负载均衡器可以处理什么样的请求？","index":"5"},{"title":"负载均衡器如何选择要转发的后端服务器？","id":"负载均衡器如何选择要转发的后端服务器？","index":"6"},{"title":"原理与实现","id":"原理与实现","index":"7","children":[{"title":"DNS轮询","id":"DNS轮询","index":"7.1"},{"title":"CDN","id":"CDN","index":"7.2"},{"title":"IP负载均衡","id":"IP负载均衡","index":"7.3"}]},{"title":"实现方式","id":"实现方式","index":"8"},{"title":"常用案例","id":"常用案例","index":"9"},{"title":"注意点","id":"注意点","index":"10"},{"title":"负载均衡算法","id":"负载均衡算法","index":"11","children":[{"title":"IP Hash（Source Hash）","id":"IP-Hash（Source-Hash）","index":"11.1"}]},{"title":"常用","id":"常用","index":"12"},{"title":"引用","id":"引用","index":"13"}]}