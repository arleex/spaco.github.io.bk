{"title":"programming noun","date":"2019-07-29T00:00:00.000Z","link":"post/programming-noun","tags":["programming-noun"],"categories":["program"],"updated":"2019-07-29T00:00:00.000Z","content":"<p>List commonly used programming nouns</p>\n<h1 id=\"Abbreviation\">Abbreviation<a href=\"post/programming-noun#Abbreviation\"></a></h1><h2 id=\"Common\">Common<a href=\"post/programming-noun#Common\"></a></h2><h3 id=\"RPC\">RPC<a href=\"post/programming-noun#RPC\"></a></h3><p>  <strong>**远程过程调用</strong>（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信<a href=\"https://zh.wikipedia.org/wiki/網絡傳輸協議\" target=\"_blank\" rel=\"noopener\">协议</a>。该协议允许运行于一台计算机的<a href=\"https://zh.wikipedia.org/wiki/程序\" target=\"_blank\" rel=\"noopener\">程序</a>调用另一台计算机的<a href=\"https://zh.wikipedia.org/wiki/子程序\" target=\"_blank\" rel=\"noopener\">子程序</a>，而程序员无需额外地为这个交互作用编程。如果涉及的软件采用<a href=\"https://zh.wikipedia.org/wiki/面向对象编程\" target=\"_blank\" rel=\"noopener\">面向对象编程</a>，那么远程过程调用亦可称作<strong>远程调用</strong>或<strong>远程方法调用</strong>，例：<a href=\"https://zh.wikipedia.org/wiki/Java_RMI\" target=\"_blank\" rel=\"noopener\">Java RMI</a>。</p>\n<h3 id=\"ORM\">ORM<a href=\"post/programming-noun#ORM\"></a></h3><p>  <strong>**对象关系映射</strong>（英语：<strong>Object Relational Mapping</strong>，简称<strong>ORM</strong>，或<strong>O/RM</strong>，或<strong>O/R mapping</strong>），是一种<a href=\"https://zh.wikipedia.org/wiki/程式設計\" target=\"_blank\" rel=\"noopener\">程序设计</a>技术，用于实现<a href=\"https://zh.wikipedia.org/wiki/物件導向\" target=\"_blank\" rel=\"noopener\">面向对象</a>编程语言里不同<a href=\"https://zh.wikipedia.org/wiki/類型系統\" target=\"_blank\" rel=\"noopener\">类型系统</a>的数据之间的转换。从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟<a href=\"https://zh.wikipedia.org/wiki/物件資料庫\" target=\"_blank\" rel=\"noopener\">对象数据库</a>”。</p>\n<h3 id=\"MVC\">MVC<a href=\"post/programming-noun#MVC\"></a></h3><p>  <strong>MVC模式</strong>（Model–view–controller）是<a href=\"https://zh.wikipedia.org/wiki/软件工程\" target=\"_blank\" rel=\"noopener\">软件工程</a>中的一种<a href=\"https://zh.wikipedia.org/wiki/软件架构\" target=\"_blank\" rel=\"noopener\">软件架构</a>模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p>\n<ul>\n<li>控制器（Controller）- 负责转发请求，对请求进行处理。</li>\n<li>视图（View） - 界面设计人员进行图形界面设计。</li>\n<li>模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</li>\n</ul>\n<h3 id=\"GC\">GC<a href=\"post/programming-noun#GC\"></a></h3><p>  <strong>垃圾回收</strong>（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的<a href=\"https://zh.wikipedia.org/wiki/記憶體管理\" target=\"_blank\" rel=\"noopener\">存储器管理</a>机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为<strong>垃圾回收</strong>。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。垃圾回收最早起源于<a href=\"https://zh.wikipedia.org/wiki/LISP\" target=\"_blank\" rel=\"noopener\">LISP</a>语言。<a href=\"https://zh.wikipedia.org/wiki/垃圾回收_(計算機科學\" target=\"_blank\" rel=\"noopener\">[1]</a>#cite_note-1)<a href=\"https://zh.wikipedia.org/wiki/垃圾回收_(計算機科學\" target=\"_blank\" rel=\"noopener\">[2]</a>#cite_note-2)当前许多语言如<a href=\"https://zh.wikipedia.org/wiki/Smalltalk\" target=\"_blank\" rel=\"noopener\">Smalltalk</a>、<a href=\"https://zh.wikipedia.org/wiki/Java\" target=\"_blank\" rel=\"noopener\">Java</a>、<a href=\"https://zh.wikipedia.org/wiki/C_Sharp\" target=\"_blank\" rel=\"noopener\">C#</a>和<a href=\"https://zh.wikipedia.org/wiki/D语言\" target=\"_blank\" rel=\"noopener\">D语言</a>都支持垃圾回收器。</p>\n<h3 id=\"OOP\">OOP<a href=\"post/programming-noun#OOP\"></a></h3><p>  <strong>面向对象程序设计</strong>（英语：Object-oriented programming，<a href=\"https://zh.wikipedia.org/wiki/缩写\" target=\"_blank\" rel=\"noopener\">缩写</a>：OOP）是种具有<a href=\"https://zh.wikipedia.org/wiki/对象_(计算机科学\" target=\"_blank\" rel=\"noopener\">对象</a>)概念的<a href=\"https://zh.wikipedia.org/wiki/编程范型\" target=\"_blank\" rel=\"noopener\">程序编程典范</a>，同时也是一种程序开发的抽象方针。它可能包含<a href=\"https://zh.wikipedia.org/wiki/数据\" target=\"_blank\" rel=\"noopener\">数据</a>、<a href=\"https://zh.wikipedia.org/w/index.php?title=属性_(计算机科学\" target=\"_blank\" rel=\"noopener\">属性</a>&amp;action=edit&amp;redlink=1)、<a href=\"https://zh.wikipedia.org/wiki/源代码\" target=\"_blank\" rel=\"noopener\">代码</a>与<a href=\"https://zh.wikipedia.org/wiki/方法_(電腦科學\" target=\"_blank\" rel=\"noopener\">方法</a>)。对象则指的是<a href=\"https://zh.wikipedia.org/wiki/类_(计算机科学\" target=\"_blank\" rel=\"noopener\">类</a>)的实例。它将<a href=\"https://zh.wikipedia.org/wiki/物件_(電腦科學\" target=\"_blank\" rel=\"noopener\">对象</a>)作为<a href=\"https://zh.wikipedia.org/wiki/计算机程序\" target=\"_blank\" rel=\"noopener\">程序</a>的基本单元，将程序和<a href=\"https://zh.wikipedia.org/wiki/数据\" target=\"_blank\" rel=\"noopener\">数据</a><a href=\"https://zh.wikipedia.org/wiki/封裝_(物件導向程式設計\" target=\"_blank\" rel=\"noopener\">封装</a>)其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象<a href=\"https://zh.wikipedia.org/wiki/面向对象程序设计#cite_note-1\" target=\"_blank\" rel=\"noopener\">[1]</a><a href=\"https://zh.wikipedia.org/wiki/面向对象程序设计#cite_note-2\" target=\"_blank\" rel=\"noopener\">[2]</a>。</p>\n<p>  面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想刚好相反：传统的程序设计主张将程序看作一系列<a href=\"https://zh.wikipedia.org/wiki/函数\" target=\"_blank\" rel=\"noopener\">函数</a>的集合，或者直接就是一系列对计算机下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。当前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。此外，支持者声称面向对象程序设计要比以往的做法更加便于学习，因为它能够让人们更简单地设计并维护程序，使得程序更加便于分析、设计、理解。反对者在某些领域对此予以否认。</p>\n<p>  当我们提到面向对象的时候，它不仅指一种程序设计方法。它更多意义上是一种程序开发方式。在这一方面，我们必须了解更多关于<a href=\"https://zh.wikipedia.org/wiki/面向对象系统分析\" target=\"_blank\" rel=\"noopener\">面向对象系统分析</a>和<a href=\"https://zh.wikipedia.org/wiki/面向对象设计\" target=\"_blank\" rel=\"noopener\">面向对象设计</a>（Object Oriented Design，简称OOD）方面的知识。许多流行的编程语言是面向对象的,它们的风格就是会透由对象来创出实例。</p>\n<p>  重要的面向对象编程语言包含<a href=\"https://zh.wikipedia.org/wiki/Common_Lisp\" target=\"_blank\" rel=\"noopener\">Common Lisp</a>、<a href=\"https://zh.wikipedia.org/wiki/Python\" target=\"_blank\" rel=\"noopener\">Python</a>、<a href=\"https://zh.wikipedia.org/wiki/C%2B%2B\" target=\"_blank\" rel=\"noopener\">C++</a>、<a href=\"https://zh.wikipedia.org/wiki/Objective-C\" target=\"_blank\" rel=\"noopener\">Objective-C</a>、<a href=\"https://zh.wikipedia.org/wiki/Smalltalk\" target=\"_blank\" rel=\"noopener\">Smalltalk</a>、<a href=\"https://zh.wikipedia.org/wiki/Delphi\" target=\"_blank\" rel=\"noopener\">Delphi</a>、<a href=\"https://zh.wikipedia.org/wiki/Java\" target=\"_blank\" rel=\"noopener\">Java</a>、<a href=\"https://zh.wikipedia.org/wiki/Swift_(程式語言\" target=\"_blank\" rel=\"noopener\">Swift</a>)、<a href=\"https://zh.wikipedia.org/wiki/C♯\" target=\"_blank\" rel=\"noopener\">C#</a>、<a href=\"https://zh.wikipedia.org/wiki/Perl\" target=\"_blank\" rel=\"noopener\">Perl</a>、<a href=\"https://zh.wikipedia.org/wiki/Ruby\" target=\"_blank\" rel=\"noopener\">Ruby</a> 与 <a href=\"https://zh.wikipedia.org/wiki/PHP\" target=\"_blank\" rel=\"noopener\">PHP</a>等。</p>\n<h3 id=\"AOP\">AOP<a href=\"post/programming-noun#AOP\"></a></h3><p>  <strong>面向切面的程序设计</strong>（Aspect-oriented programming，AOP，又译作<strong>面向方面的程序设计</strong>、<strong>剖面导向程序设计</strong>）是<a href=\"https://zh.wikipedia.org/wiki/计算机科学\" target=\"_blank\" rel=\"noopener\">计算机科学</a>中的一种<a href=\"https://zh.wikipedia.org/wiki/编程范型\" target=\"_blank\" rel=\"noopener\">程序设计思想</a>，旨在将<strong>横切关注点</strong>与业务主体进行进一步分离，以提高程序代码的模块化程度。通过在现有代码基础上增加额外的<strong>通知</strong>（Advice）机制，能够对被声明为“<strong>切点</strong>（Pointcut）”的代码块进行统一管理与装饰，如“对所有方法名以‘set*’开头的方法添加后台日志”。该思想使得开发人员能够将与代码核心业务逻辑关系不那么密切的功能（如日志功能）添加至程序中，同时又不降低业务代码的可读性。面向切面的程序设计思想也是面向切面软件开发的基础。</p>\n<h3 id=\"REST\"><a href=\"https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\" target=\"_blank\" rel=\"noopener\">REST</a><a href=\"post/programming-noun#REST\"></a></h3><p>表现层状态转换（英语：REpresentational State Transfer，縮寫：<strong>REST</strong>）是一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。</p>\n<p><strong>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</strong></p>\n<h3 id=\"SOAP\"><a href=\"https://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\">SOAP</a><a href=\"post/programming-noun#SOAP\"></a></h3><p><strong>SOAP</strong>（原为Simple Object Access Protocol的首字母缩写，即简单对象访问协议）是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。</p>\n<p>SOAP使用因特网应用层协议作为其传输协议。<a href=\"https://zh.wikipedia.org/wiki/SMTP\" target=\"_blank\" rel=\"noopener\">SMTP</a>以及<a href=\"https://zh.wikipedia.org/wiki/HTTP\" target=\"_blank\" rel=\"noopener\">HTTP</a>协议都可以用来传输SOAP消息，但是由于HTTP在如今的因特网结构中工作得很好，特别是在网络防火墙下仍然正常工作，所以被广泛采纳。SOAP亦可以在<a href=\"https://zh.wikipedia.org/wiki/HTTPS\" target=\"_blank\" rel=\"noopener\">HTTPS</a>上传输。</p>\n<p>SOAP的消息格式采用<a href=\"https://zh.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a>。</p>\n<p>实际上计算机网络上交换基于XML的消息的协议，通常是用HTTP。</p>\n<p><a href=\"\">SOAP 与 REST 的区别</a></p>\n<h3 id=\"SOA\">SOA<a href=\"post/programming-noun#SOA\"></a></h3><p><strong>面向服务的体系结构</strong>（英语：service-oriented architecture）并不特指一种技术，而是一种分布式运算的软件设计方法</p>\n<h3 id=\"API\">API<a href=\"post/programming-noun#API\"></a></h3><p>应用程序接口（英语：Application Programming Interface，缩写：<strong>API</strong>；又称为应用程序编程接口）是软件系统不同组成部分衔接的约定。 由於近年來软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。</p>\n<h3 id=\"AJAX\">AJAX<a href=\"post/programming-noun#AJAX\"></a></h3><p><strong>AJAX</strong>即“<strong>Asynchronous JavaScript and XML</strong>”（异步的<a href=\"https://zh.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript</a>与<a href=\"https://zh.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a>技术），指的是一套综合了多项技术的<a href=\"https://zh.wikipedia.org/wiki/瀏覽器\" target=\"_blank\" rel=\"noopener\">浏览器</a>端<a href=\"https://zh.wikipedia.org/wiki/網頁\" target=\"_blank\" rel=\"noopener\">网页</a>开发技术</p>\n<h3 id=\"JSON\">JSON<a href=\"post/programming-noun#JSON\"></a></h3><p><strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象表示法，读作/ˈdʒeɪsən/）是一种由轻量级的<a href=\"https://zh.wikipedia.org/wiki/数据交换\" target=\"_blank\" rel=\"noopener\">数据交换语言</a>，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是<a href=\"https://zh.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript</a>的一个子集，但JSON是独立于语言的<a href=\"https://zh.wikipedia.org/wiki/文本文件\" target=\"_blank\" rel=\"noopener\">文本格式</a>。</p>\n<p>JSON 数据格式与语言无关，脱胎自<a href=\"https://zh.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript</a>，但当前很多<a href=\"https://zh.wikipedia.org/wiki/编程语言\" target=\"_blank\" rel=\"noopener\">编程语言</a>都支持 JSON 格式数据的生成和<a href=\"https://zh.wikipedia.org/wiki/语法分析器\" target=\"_blank\" rel=\"noopener\">解析</a>。JSON 的官方 <a href=\"https://zh.wikipedia.org/wiki/互联网媒体类型\" target=\"_blank\" rel=\"noopener\">MIME 类型</a>是 <code>application/json</code>，文件扩展名是 <code>.json</code>。</p>\n<h2 id=\"Java\">Java<a href=\"post/programming-noun#Java\"></a></h2><h3 id=\"JPA\">JPA<a href=\"post/programming-noun#JPA\"></a></h3><p><strong>Java 持久化 API</strong> (<strong>Java Persistence API </strong>)是一个 <a href=\"https://zh.wikipedia.org/wiki/Java\" target=\"_blank\" rel=\"noopener\">Java</a> <a href=\"https://zh.wikipedia.org/wiki/应用程序接口\" target=\"_blank\" rel=\"noopener\">应用程序接口</a> 规范，描述了使用 <a href=\"https://zh.wikipedia.org/wiki/Java_SE\" target=\"_blank\" rel=\"noopener\">Java标准版平台</a>（Java SE） 和 <a href=\"https://zh.wikipedia.org/wiki/Jakarta_EE\" target=\"_blank\" rel=\"noopener\">Java企业版平台</a>（Java EE）的应用中的 <a href=\"https://zh.wikipedia.org/wiki/Jakarta_EE\" target=\"_blank\" rel=\"noopener\">关系数据</a> 的管理。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Persistence_(computer_science\" target=\"_blank\" rel=\"noopener\">持久化</a>)，在这里包括三个层面的意思：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/应用程序接口\" target=\"_blank\" rel=\"noopener\">API</a> 本身，定义在 javax.persistence 包<code>内</code></li>\n<li>Java持久化查询语言 (JPQL)</li>\n<li>对象/关系 元数据</li>\n</ul>\n<h3 id=\"JPQL\">JPQL<a href=\"post/programming-noun#JPQL\"></a></h3><p>Java持久化查询语言 （JPQL）对存储在关系数据库中的实体进行查询。查询在语法上类似于SQL查询，但是操作的是实体对象而不是直接对数据库表进行操作。</p>\n<h3 id=\"EJB\">EJB<a href=\"post/programming-noun#EJB\"></a></h3><p>企业级JavaBean（Enterprise JavaBean, <strong>EJB</strong>）是一个用来构筑企业级应用的服务器端可被管理组件。 Java企业版API（Java Enterprise Edition）中提供了对<strong>EJB</strong>的规范。 <strong>EJB</strong>是一个封装有某个应用程序之业务逻辑服务器端组件。</p>\n<h3 id=\"POJO\">POJO<a href=\"post/programming-noun#POJO\"></a></h3><p><strong>POJO</strong>（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。 使用<strong>POJO</strong>名称是为了避免和EJB混淆起来, 而且简称比较直接.其中有一些属性及其 getter setter 方法的类，没有业务逻辑，有时可以作为VO(Value Object) 或 DTO(Data Transform Object) 来使用。当然，如果你有一个简单的运算属性也是可以的。</p>\n<h2 id=\"PHP\">PHP<a href=\"post/programming-noun#PHP\"></a></h2><h3 id=\"PHP-1\">PHP<a href=\"post/programming-noun#PHP-1\"></a></h3><p>  <strong>PHP</strong>（全称：<strong>P</strong>HP：<strong>H</strong>ypertext <strong>P</strong>reprocessor，即“PHP：超文本预处理器”）是一种<a href=\"https://zh.wikipedia.org/wiki/开源\" target=\"_blank\" rel=\"noopener\">开源</a>的通用<a href=\"https://zh.wikipedia.org/wiki/计算机\" target=\"_blank\" rel=\"noopener\">计算机</a><a href=\"https://zh.wikipedia.org/wiki/脚本语言\" target=\"_blank\" rel=\"noopener\">脚本语言</a>，尤其适用于<a href=\"https://zh.wikipedia.org/wiki/网络开发\" target=\"_blank\" rel=\"noopener\">网络开发</a>并可嵌入<a href=\"https://zh.wikipedia.org/wiki/HTML\" target=\"_blank\" rel=\"noopener\">HTML</a>中使用。PHP的语法借鉴吸收<a href=\"https://zh.wikipedia.org/wiki/C语言\" target=\"_blank\" rel=\"noopener\">C语言</a>、<a href=\"https://zh.wikipedia.org/wiki/Java\" target=\"_blank\" rel=\"noopener\">Java</a>和<a href=\"https://zh.wikipedia.org/wiki/Perl\" target=\"_blank\" rel=\"noopener\">Perl</a>等流行计算机语言的特点，易于一般<a href=\"https://zh.wikipedia.org/wiki/程序员\" target=\"_blank\" rel=\"noopener\">程序员</a>学习。PHP的主要目标是允许网络开发人员快速编写<a href=\"https://zh.wikipedia.org/wiki/动态页面\" target=\"_blank\" rel=\"noopener\">动态页面</a>，但PHP也被用于其他很多领域。<a href=\"https://zh.wikipedia.org/wiki/PHP#cite_note-1\" target=\"_blank\" rel=\"noopener\">[1]</a></p>\n<p>  PHP最初是由<a href=\"https://zh.wikipedia.org/wiki/拉斯姆斯·勒多夫\" target=\"_blank\" rel=\"noopener\">勒多夫</a>在1995年开始开发的；现在PHP的标准由the PHP Group<a href=\"https://zh.wikipedia.org/wiki/PHP#cite_note-2\" target=\"_blank\" rel=\"noopener\">[2]</a>维护。PHP以PHP License作为许可协议，不过因为这个协议限制了PHP名称的使用，所以和<a href=\"https://zh.wikipedia.org/wiki/開放原始碼\" target=\"_blank\" rel=\"noopener\">开放源代码</a>许可协议<a href=\"https://zh.wikipedia.org/wiki/GPL\" target=\"_blank\" rel=\"noopener\">GPL</a>不兼容。<a href=\"https://zh.wikipedia.org/wiki/PHP#cite_note-3\" target=\"_blank\" rel=\"noopener\">[3]</a></p>\n<h2 id=\"DataBase\">DataBase<a href=\"post/programming-noun#DataBase\"></a></h2>","prev":{"title":"difference between mongo mongodb mongod","link":"post/difference-between-mongo-mongodb-mongod"},"next":{"title":"php extension install","link":"post/php-extension-install"},"plink":"https://spaco.github.io/post/programming-noun/","toc":[{"title":"Abbreviation","id":"Abbreviation","index":"1","children":[{"title":"Common","id":"Common","index":"1.1","children":[{"title":"RPC","id":"RPC","index":"1.1.1"},{"title":"ORM","id":"ORM","index":"1.1.2"},{"title":"MVC","id":"MVC","index":"1.1.3"},{"title":"GC","id":"GC","index":"1.1.4"},{"title":"OOP","id":"OOP","index":"1.1.5"},{"title":"AOP","id":"AOP","index":"1.1.6"},{"title":"<a>REST</a>","id":"REST","index":"1.1.7"},{"title":"<a>SOAP</a>","id":"SOAP","index":"1.1.8"},{"title":"SOA","id":"SOA","index":"1.1.9"},{"title":"API","id":"API","index":"1.1.10"},{"title":"AJAX","id":"AJAX","index":"1.1.11"},{"title":"JSON","id":"JSON","index":"1.1.12"}]},{"title":"Java","id":"Java","index":"1.2","children":[{"title":"JPA","id":"JPA","index":"1.2.1"},{"title":"JPQL","id":"JPQL","index":"1.2.2"},{"title":"EJB","id":"EJB","index":"1.2.3"},{"title":"POJO","id":"POJO","index":"1.2.4"}]},{"title":"PHP","id":"PHP","index":"1.3","children":[{"title":"PHP","id":"PHP-1","index":"1.3.1"}]},{"title":"DataBase","id":"DataBase","index":"1.4"}]}],"reward":true,"copyright":{"link":"<a href=\"https://spaco.github.io/post/programming-noun/\" title=\"programming noun\">https://spaco.github.io/post/programming-noun/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}