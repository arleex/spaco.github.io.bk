{"title":"programming noun","date":"2019-07-29T00:00:00.000Z","link":"post/programming-noun","tags":["programming-noun"],"categories":["program"],"updated":"2019-07-29T00:00:00.000Z","content":"<p>List commonly used programming nouns</p>\n<h1 id=\"Abbreviation\">Abbreviation<a href=\"post/programming-noun#Abbreviation\"></a></h1><h2 id=\"Common\">Common<a href=\"post/programming-noun#Common\"></a></h2><h3 id=\"HTTP\">HTTP<a href=\"post/programming-noun#HTTP\"></a></h3><p> <a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\"><strong>HTTP</strong></a>（<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol）：超文本传输协议<br>是一种用于分布式、协作式和<a href=\"https://zh.wikipedia.org/wiki/超媒體\" target=\"_blank\" rel=\"noopener\">超媒体</a>信息系统的<a href=\"https://zh.wikipedia.org/wiki/应用层\" target=\"_blank\" rel=\"noopener\">应用层</a><a href=\"https://zh.wikipedia.org/wiki/网络传输协议\" target=\"_blank\" rel=\"noopener\">协议</a>。</p>\n<h3 id=\"CAP\">CAP<a href=\"post/programming-noun#CAP\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86\" target=\"_blank\" rel=\"noopener\">CAP定理</a></strong>（CAP theorem），又被称作<strong>布鲁尔定理</strong>（Brewer’s theorem），在<a href=\"https://zh.wikipedia.org/wiki/理論計算機科學\" target=\"_blank\" rel=\"noopener\">理论计算机科学</a>中，它指出对于一个<a href=\"https://zh.wikipedia.org/wiki/分布式计算\" target=\"_blank\" rel=\"noopener\">分布式计算系统</a>来说，不可能同时满足以下三点：</p>\n<ul>\n<li>一致性（<strong>C</strong>onsistency） （等同于所有节点访问同一份最新的数据副本）</li>\n<li><a href=\"https://zh.wikipedia.org/wiki/可用性\" target=\"_blank\" rel=\"noopener\">可用性</a>（<strong>A</strong>vailability）（每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）</li>\n<li><a href=\"https://zh.wikipedia.org/w/index.php?title=网络分区&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">分区容错性</a>（<strong>P</strong>artition tolerance）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择<a href=\"https://zh.wikipedia.org/wiki/CAP定理#cite_note-3\" target=\"_blank\" rel=\"noopener\">[3]</a>。）</li>\n</ul>\n<p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项<a href=\"https://zh.wikipedia.org/wiki/CAP定理#cite_note-4\" target=\"_blank\" rel=\"noopener\">[4]</a>。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。</p>\n<h3 id=\"ACID\">ACID<a href=\"post/programming-noun#ACID\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/ACID\" target=\"_blank\" rel=\"noopener\">ACID</a></strong>，是指<a href=\"https://zh.wikipedia.org/wiki/数据库管理系统\" target=\"_blank\" rel=\"noopener\">数据库管理系统</a>（<a href=\"https://zh.wikipedia.org/wiki/DBMS\" target=\"_blank\" rel=\"noopener\">DBMS</a>）在写入或更新资料的过程中，为保证<a href=\"https://zh.wikipedia.org/wiki/数据库事务\" target=\"_blank\" rel=\"noopener\">事务</a>（transaction）是正确可靠的，所必须具备的四个特性：<a href=\"https://zh.wikipedia.org/w/index.php?title=原子性&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">原子性</a>（atomicity，或称不可分割性）、<a href=\"https://zh.wikipedia.org/w/index.php?title=一致性_(数据库系统\" target=\"_blank\" rel=\"noopener\">一致性</a>&amp;action=edit&amp;redlink=1)（consistency）、<a href=\"https://zh.wikipedia.org/wiki/隔離性\" target=\"_blank\" rel=\"noopener\">隔离性</a>（isolation，又称独立性）、<a href=\"https://zh.wikipedia.org/w/index.php?title=持久性&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">持久性</a>（durability）</p>\n<h3 id=\"RPC\">RPC<a href=\"post/programming-noun#RPC\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener\">RPC</a></strong>（Remote Procedure Call）：远程过程调用<br>是一个计算机通信<a href=\"https://zh.wikipedia.org/wiki/網絡傳輸協議\" target=\"_blank\" rel=\"noopener\">协议</a>。该协议允许运行于一台计算机的<a href=\"https://zh.wikipedia.org/wiki/程序\" target=\"_blank\" rel=\"noopener\">程序</a>调用另一台计算机的<a href=\"https://zh.wikipedia.org/wiki/子程序\" target=\"_blank\" rel=\"noopener\">子程序</a>，而程序员无需额外地为这个交互作用编程。如果涉及的软件采用<a href=\"https://zh.wikipedia.org/wiki/面向对象编程\" target=\"_blank\" rel=\"noopener\">面向对象编程</a>，那么远程过程调用亦可称作<strong>远程调用</strong>或<strong>远程方法调用</strong>，例：<a href=\"https://zh.wikipedia.org/wiki/Java_RMI\" target=\"_blank\" rel=\"noopener\">Java RMI</a>。</p>\n<h3 id=\"ORM\">ORM<a href=\"post/programming-noun#ORM\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84\" target=\"_blank\" rel=\"noopener\">ORM</a></strong>（Object Relational Mapping）：对象关系映射<br>是一种<a href=\"https://zh.wikipedia.org/wiki/程式設計\" target=\"_blank\" rel=\"noopener\">程序设计</a>技术，用于实现<a href=\"https://zh.wikipedia.org/wiki/物件導向\" target=\"_blank\" rel=\"noopener\">面向对象</a>编程语言里不同<a href=\"https://zh.wikipedia.org/wiki/類型系統\" target=\"_blank\" rel=\"noopener\">类型系统</a>的数据之间的转换。从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟<a href=\"https://zh.wikipedia.org/wiki/物件資料庫\" target=\"_blank\" rel=\"noopener\">对象数据库</a>”。</p>\n<h3 id=\"MVC\">MVC<a href=\"post/programming-noun#MVC\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/MVC\" target=\"_blank\" rel=\"noopener\">MVC</a></strong>（Model–view–controller）：MVC模式<br>是<a href=\"https://zh.wikipedia.org/wiki/软件工程\" target=\"_blank\" rel=\"noopener\">软件工程</a>中的一种<a href=\"https://zh.wikipedia.org/wiki/软件架构\" target=\"_blank\" rel=\"noopener\">软件架构</a>模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p>\n<ul>\n<li>控制器（Controller）- 负责转发请求，对请求进行处理。</li>\n<li>视图（View） - 界面设计人员进行图形界面设计。</li>\n<li>模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</li>\n</ul>\n<h3 id=\"GC\">GC<a href=\"post/programming-noun#GC\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/垃圾回收_(計算機科學\" target=\"_blank\" rel=\"noopener\">GC</a>)</strong>（Garbage Collection）: 垃圾回收</p>\n<p>在计算机科学中是一种自动的<a href=\"https://zh.wikipedia.org/wiki/記憶體管理\" target=\"_blank\" rel=\"noopener\">存储器管理</a>机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为<strong>垃圾回收</strong>。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。垃圾回收最早起源于<a href=\"https://zh.wikipedia.org/wiki/LISP\" target=\"_blank\" rel=\"noopener\">LISP</a>语言。当前许多语言如<a href=\"https://zh.wikipedia.org/wiki/Smalltalk\" target=\"_blank\" rel=\"noopener\">Smalltalk</a>、<a href=\"https://zh.wikipedia.org/wiki/Java\" target=\"_blank\" rel=\"noopener\">Java</a>、<a href=\"https://zh.wikipedia.org/wiki/C_Sharp\" target=\"_blank\" rel=\"noopener\">C#</a>和<a href=\"https://zh.wikipedia.org/wiki/D语言\" target=\"_blank\" rel=\"noopener\">D语言</a>都支持垃圾回收器。</p>\n<h3 id=\"OOP\">OOP<a href=\"post/programming-noun#OOP\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">OOP</a></strong>（Object-oriented programming）：面向对象程序设计</p>\n<p>是种具有<a href=\"https://zh.wikipedia.org/wiki/对象_(计算机科学\" target=\"_blank\" rel=\"noopener\">对象</a>)概念的<a href=\"https://zh.wikipedia.org/wiki/编程范型\" target=\"_blank\" rel=\"noopener\">程序编程典范</a>，同时也是一种程序开发的抽象方针。</p>\n<h3 id=\"AOP\">AOP<a href=\"post/programming-noun#AOP\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">AOP</a></strong>（Aspect-oriented programming）：面向切面编程</p>\n<p>是<a href=\"https://zh.wikipedia.org/wiki/计算机科学\" target=\"_blank\" rel=\"noopener\">计算机科学</a>中的一种<a href=\"https://zh.wikipedia.org/wiki/编程范型\" target=\"_blank\" rel=\"noopener\">程序设计思想</a>，旨在将<strong>横切关注点</strong>与业务主体进行进一步分离，以提高程序代码的模块化程度。通过在现有代码基础上增加额外的<strong>通知</strong>（Advice）机制，能够对被声明为“<strong>切点</strong>（Pointcut）”的代码块进行统一管理与装饰，如“对所有方法名以‘set*’开头的方法添加后台日志”。该思想使得开发人员能够将与代码核心业务逻辑关系不那么密切的功能（如日志功能）添加至程序中，同时又不降低业务代码的可读性。面向切面的程序设计思想也是面向切面软件开发的基础。</p>\n<h3 id=\"REST\">REST<a href=\"post/programming-noun#REST\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\" target=\"_blank\" rel=\"noopener\">REST</a></strong>（REpresentational State Transfer）：表现层状态转换</p>\n<p>是一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。</p>\n<p><strong>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</strong></p>\n<h3 id=\"SOAP\">SOAP<a href=\"post/programming-noun#SOAP\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E7%AE%80%E5%8D%95%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\">SOAP</a></strong>（Simple Object Access Protocol）：简单对象访问协议<br>是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。<br>SOAP使用因特网应用层协议作为其传输协议。<a href=\"https://zh.wikipedia.org/wiki/SMTP\" target=\"_blank\" rel=\"noopener\">SMTP</a>以及<a href=\"https://zh.wikipedia.org/wiki/HTTP\" target=\"_blank\" rel=\"noopener\">HTTP</a>协议都可以用来传输SOAP消息，但是由于HTTP在如今的因特网结构中工作得很好，特别是在网络防火墙下仍然正常工作，所以被广泛采纳。SOAP亦可以在<a href=\"https://zh.wikipedia.org/wiki/HTTPS\" target=\"_blank\" rel=\"noopener\">HTTPS</a>上传输。<br>SOAP的消息格式采用<a href=\"https://zh.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a>。<br>实际上计算机网络上交换基于XML的消息的协议，通常是用HTTP。</p>\n<p><a href=\"\">SOAP 与 REST 的区别</a></p>\n<h3 id=\"SOA\">SOA<a href=\"post/programming-noun#SOA\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\" target=\"_blank\" rel=\"noopener\">SOA</a></strong>（service-oriented architecture）：面向服务的体系结构</p>\n<p>并不特指一种技术，而是一种分布式运算的软件设计方法</p>\n<h3 id=\"API\">API<a href=\"post/programming-noun#API\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3\" target=\"_blank\" rel=\"noopener\">API</a></strong>（）：</p>\n<p>应用程序接口（英语：Application Programming Interface，缩写：<strong>API</strong>；又称为应用程序编程接口）是软件系统不同组成部分衔接的约定。 由於近年來软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。</p>\n<h3 id=\"AJAX\"><a href=\"https://zh.wikipedia.org/wiki/AJAX\" target=\"_blank\" rel=\"noopener\">AJAX</a><a href=\"post/programming-noun#AJAX\"></a></h3><p>AJAX（Asynchronous JavaScript and XML）：异步的<a href=\"https://zh.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript</a>与<a href=\"https://zh.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a>技术</p>\n<p>指的是一套综合了多项技术的<a href=\"https://zh.wikipedia.org/wiki/瀏覽器\" target=\"_blank\" rel=\"noopener\">浏览器</a>端<a href=\"https://zh.wikipedia.org/wiki/網頁\" target=\"_blank\" rel=\"noopener\">网页</a>开发技术</p>\n<h3 id=\"JSON\">JSON<a href=\"post/programming-noun#JSON\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/JSON\" target=\"_blank\" rel=\"noopener\">JSON</a></strong>（J<strong>ava</strong>S<strong>cript </strong>O<strong>bject </strong>N**otation）：JavaScript对象表示法</p>\n<p>是一种由轻量级的<a href=\"https://zh.wikipedia.org/wiki/数据交换\" target=\"_blank\" rel=\"noopener\">数据交换语言</a>，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是<a href=\"https://zh.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript</a>的一个子集，但JSON是独立于语言的<a href=\"https://zh.wikipedia.org/wiki/文本文件\" target=\"_blank\" rel=\"noopener\">文本格式</a>。</p>\n<p>JSON 数据格式与语言无关，脱胎自<a href=\"https://zh.wikipedia.org/wiki/JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript</a>，但当前很多<a href=\"https://zh.wikipedia.org/wiki/编程语言\" target=\"_blank\" rel=\"noopener\">编程语言</a>都支持 JSON 格式数据的生成和<a href=\"https://zh.wikipedia.org/wiki/语法分析器\" target=\"_blank\" rel=\"noopener\">解析</a>。JSON 的官方 <a href=\"https://zh.wikipedia.org/wiki/互联网媒体类型\" target=\"_blank\" rel=\"noopener\">MIME 类型</a>是 <code>application/json</code>，文件扩展名是 <code>.json</code>。</p>\n<h3 id=\"XML\">XML<a href=\"post/programming-noun#XML\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"noopener\">XML</a></strong>（E<strong>x</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage）：可扩展标记语言</p>\n<p><strong>可扩展标记语言</strong>（英语：E<strong>x</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage，简称：<strong>XML</strong>）是一种<a href=\"https://zh.wikipedia.org/wiki/标记语言\" target=\"_blank\" rel=\"noopener\">标记语言</a>。标记指<a href=\"https://zh.wikipedia.org/wiki/计算机\" target=\"_blank\" rel=\"noopener\">计算机</a>所能理解的信息符号，通过此种标记，<a href=\"https://zh.wikipedia.org/wiki/電腦\" target=\"_blank\" rel=\"noopener\">计算机</a>之间可以处理包含各种信息的文章等</p>\n<h3 id=\"DI\">DI<a href=\"post/programming-noun#DI\"></a></h3><p>Dependency Injection，依赖注入。在软件工程中，依赖注入是种实现控制反转用于解决依赖性设计模式。一个依赖关系指的是可被利用的一种对象（即服务提供端） 。依赖注入是将所依赖的传递给将使用的从属对象（即客户端）。该服务是将会变成客户端的状态的一部分。 传递服务给客户端，而非允许客户端来建立或寻找服务，是本设计模式的基本要求。</p>\n<h3 id=\"IoC\">IoC<a href=\"post/programming-noun#IoC\"></a></h3><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p>\n<h3 id=\"DNS\">DNS<a href=\"post/programming-noun#DNS\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F\" target=\"_blank\" rel=\"noopener\">DNS</a></strong>（D<strong>omain </strong>N<strong>ame </strong>S**ystem）：域名系统</p>\n<p>是<a href=\"https://zh.wikipedia.org/wiki/互联网\" target=\"_blank\" rel=\"noopener\">互联网</a>的一项服务。它作为将<a href=\"https://zh.wikipedia.org/wiki/域名\" target=\"_blank\" rel=\"noopener\">域名</a>和<a href=\"https://zh.wikipedia.org/wiki/IP地址\" target=\"_blank\" rel=\"noopener\">IP地址</a>相互<a href=\"https://zh.wikipedia.org/wiki/映射\" target=\"_blank\" rel=\"noopener\">映射</a>的一个<a href=\"https://zh.wikipedia.org/wiki/分布式数据库\" target=\"_blank\" rel=\"noopener\">分布式数据库</a>，能够使人更方便地访问<a href=\"https://zh.wikipedia.org/wiki/互联网\" target=\"_blank\" rel=\"noopener\">互联网</a>。</p>\n<h3 id=\"GUI\">GUI<a href=\"post/programming-noun#GUI\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2\" target=\"_blank\" rel=\"noopener\">GUI</a></strong>（G<strong>raphical </strong>U<strong>ser </strong>I**nterface）：图形用户界面</p>\n<p>是指采用图形方式显示的<a href=\"https://zh.wikipedia.org/wiki/计算机\" target=\"_blank\" rel=\"noopener\">计算机</a>操作<a href=\"https://zh.wikipedia.org/wiki/用户界面\" target=\"_blank\" rel=\"noopener\">用户界面</a>。与早期计算机使用的<a href=\"https://zh.wikipedia.org/wiki/命令行界面\" target=\"_blank\" rel=\"noopener\">命令行界面</a>相比，图形界面对于用户来说在<a href=\"https://zh.wikipedia.org/wiki/视觉\" target=\"_blank\" rel=\"noopener\">视觉</a>上更易于接受。</p>\n<h3 id=\"JWT\">JWT<a href=\"post/programming-noun#JWT\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/JWT\" target=\"_blank\" rel=\"noopener\">JWT</a></strong>（JSON Web Token）：</p>\n<p>一种用以产生访问令牌的开源标准，适用于分布式站点的单点登录（SSO）场景。</p>\n<h2 id=\"Java\">Java<a href=\"post/programming-noun#Java\"></a></h2><h3 id=\"JPA\">JPA<a href=\"post/programming-noun#JPA\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/Java持久化API\" target=\"_blank\" rel=\"noopener\">JPA</a></strong>（Java Persistence API）：Java 持久化 API</p>\n<p>是一个 <a href=\"https://zh.wikipedia.org/wiki/Java\" target=\"_blank\" rel=\"noopener\">Java</a> <a href=\"https://zh.wikipedia.org/wiki/应用程序接口\" target=\"_blank\" rel=\"noopener\">应用程序接口</a> 规范，描述了使用 <a href=\"https://zh.wikipedia.org/wiki/Java_SE\" target=\"_blank\" rel=\"noopener\">Java标准版平台</a>（Java SE） 和 <a href=\"https://zh.wikipedia.org/wiki/Jakarta_EE\" target=\"_blank\" rel=\"noopener\">Java企业版平台</a>（Java EE）的应用中的 <a href=\"https://zh.wikipedia.org/wiki/Jakarta_EE\" target=\"_blank\" rel=\"noopener\">关系数据</a> 的管理。</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Persistence_(computer_science\" target=\"_blank\" rel=\"noopener\">持久化</a>)，在这里包括三个层面的意思：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/应用程序接口\" target=\"_blank\" rel=\"noopener\">API</a> 本身，定义在 javax.persistence 包<code>内</code></li>\n<li>Java持久化查询语言 (JPQL)</li>\n<li>对象/关系 元数据</li>\n</ul>\n<h3 id=\"JPQL\">JPQL<a href=\"post/programming-noun#JPQL\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/JPQL\" target=\"_blank\" rel=\"noopener\">JPQL</a></strong>（Java Persistence Query Language）：Java持久化查询语言</p>\n<p>对存储在关系数据库中的实体进行查询。查询在语法上类似于SQL查询，但是操作的是实体对象而不是直接对数据库表进行操作。</p>\n<h3 id=\"EJB\">EJB<a href=\"post/programming-noun#EJB\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/EJB\" target=\"_blank\" rel=\"noopener\">EJB</a></strong>（Enterprise JavaBean）：企业级JavaBean</p>\n<p>是一个用来构筑企业级应用的服务器端可被管理组件。 Java企业版API（Java Enterprise Edition）中提供了对<strong>EJB</strong>的规范。 <strong>EJB</strong>是一个封装有某个应用程序之业务逻辑服务器端组件。</p>\n<h3 id=\"POJO\">POJO<a href=\"post/programming-noun#POJO\"></a></h3><p><strong>POJO</strong>（Plain Ordinary Java Object）：简单的Java对象</p>\n<p>实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。 使用<strong>POJO</strong>名称是为了避免和EJB混淆起来, 而且简称比较直接.其中有一些属性及其 getter setter 方法的类，没有业务逻辑，有时可以作为VO(Value Object) 或 DTO(Data Transform Object) 来使用。当然，如果你有一个简单的运算属性也是可以的。</p>\n<h2 id=\"PHP\">PHP<a href=\"post/programming-noun#PHP\"></a></h2><h3 id=\"PHP-1\">PHP<a href=\"post/programming-noun#PHP-1\"></a></h3><p>  <strong>PHP</strong>（全称：<strong>P</strong>HP：<strong>H</strong>ypertext <strong>P</strong>reprocessor，即“PHP：超文本预处理器”）是一种<a href=\"https://zh.wikipedia.org/wiki/开源\" target=\"_blank\" rel=\"noopener\">开源</a>的通用<a href=\"https://zh.wikipedia.org/wiki/计算机\" target=\"_blank\" rel=\"noopener\">计算机</a><a href=\"https://zh.wikipedia.org/wiki/脚本语言\" target=\"_blank\" rel=\"noopener\">脚本语言</a></p>\n<h2 id=\"DataBase\">DataBase<a href=\"post/programming-noun#DataBase\"></a></h2><h3 id=\"SQL\">SQL<a href=\"post/programming-noun#SQL\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/SQL\" target=\"_blank\" rel=\"noopener\">SQL</a></strong>（Structured Query Language）：结构化查询语言</p>\n<p>是一种<a href=\"https://zh.wikipedia.org/wiki/特定目的程式语言\" target=\"_blank\" rel=\"noopener\">特定目的编程语言</a>，用于管理<a href=\"https://zh.wikipedia.org/wiki/关系数据库管理系统\" target=\"_blank\" rel=\"noopener\">关系数据库管理系统</a>（RDBMS），或在<a href=\"https://zh.wikipedia.org/wiki/关系流数据管理系统\" target=\"_blank\" rel=\"noopener\">关系流数据管理系统</a>（RDSMS）中进行流处理。</p>\n<h3 id=\"NoSQL\">NoSQL<a href=\"post/programming-noun#NoSQL\"></a></h3><p><strong><a href=\"https://zh.wikipedia.org/wiki/NoSQL\" target=\"_blank\" rel=\"noopener\">NoSQL</a></strong>（）：</p>\n<p>是对不同于传统的<a href=\"https://zh.wikipedia.org/wiki/關聯式資料庫\" target=\"_blank\" rel=\"noopener\">关系数据库</a>的<a href=\"https://zh.wikipedia.org/wiki/数据库管理系统\" target=\"_blank\" rel=\"noopener\">数据库管理系统</a>的统称。两者存在许多显著的不同点，其中最重要的是NoSQL不使用SQL作为查询语言。其数据存储可以不需要固定的表格模式，也经常会避免使用SQL的<a href=\"https://zh.wikipedia.org/wiki/连接_(SQL\" target=\"_blank\" rel=\"noopener\">JOIN</a>)操作，一般有<a href=\"https://zh.wikipedia.org/w/index.php?title=水平可扩展性&amp;action=edit&amp;redlink=1\" target=\"_blank\" rel=\"noopener\">水平可扩展性</a>的特征。</p>\n<h2 id=\"Front-end\">Front end<a href=\"post/programming-noun#Front-end\"></a></h2><h3 id=\"SPA\">SPA<a href=\"post/programming-noun#SPA\"></a></h3><p>单页 Web 应用（single page web application），就是只有一张 Web 页面的应用，是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的 Web 应用程序。</p>\n","prev":{"title":"difference between mongo mongodb mongod","link":"post/difference-between-mongo-mongodb-mongod"},"next":{"title":"php extension install","link":"post/php-extension-install"},"plink":"https://spaco.github.io/post/programming-noun/","toc":[{"title":"Abbreviation","id":"Abbreviation","index":"1","children":[{"title":"Common","id":"Common","index":"1.1","children":[{"title":"HTTP","id":"HTTP","index":"1.1.1"},{"title":"CAP","id":"CAP","index":"1.1.2"},{"title":"ACID","id":"ACID","index":"1.1.3"},{"title":"RPC","id":"RPC","index":"1.1.4"},{"title":"ORM","id":"ORM","index":"1.1.5"},{"title":"MVC","id":"MVC","index":"1.1.6"},{"title":"GC","id":"GC","index":"1.1.7"},{"title":"OOP","id":"OOP","index":"1.1.8"},{"title":"AOP","id":"AOP","index":"1.1.9"},{"title":"REST","id":"REST","index":"1.1.10"},{"title":"SOAP","id":"SOAP","index":"1.1.11"},{"title":"SOA","id":"SOA","index":"1.1.12"},{"title":"API","id":"API","index":"1.1.13"},{"title":"<a>AJAX</a>","id":"AJAX","index":"1.1.14"},{"title":"JSON","id":"JSON","index":"1.1.15"},{"title":"XML","id":"XML","index":"1.1.16"},{"title":"DI","id":"DI","index":"1.1.17"},{"title":"IoC","id":"IoC","index":"1.1.18"},{"title":"DNS","id":"DNS","index":"1.1.19"},{"title":"GUI","id":"GUI","index":"1.1.20"},{"title":"JWT","id":"JWT","index":"1.1.21"}]},{"title":"Java","id":"Java","index":"1.2","children":[{"title":"JPA","id":"JPA","index":"1.2.1"},{"title":"JPQL","id":"JPQL","index":"1.2.2"},{"title":"EJB","id":"EJB","index":"1.2.3"},{"title":"POJO","id":"POJO","index":"1.2.4"}]},{"title":"PHP","id":"PHP","index":"1.3","children":[{"title":"PHP","id":"PHP-1","index":"1.3.1"}]},{"title":"DataBase","id":"DataBase","index":"1.4","children":[{"title":"SQL","id":"SQL","index":"1.4.1"},{"title":"NoSQL","id":"NoSQL","index":"1.4.2"}]},{"title":"Front end","id":"Front-end","index":"1.5","children":[{"title":"SPA","id":"SPA","index":"1.5.1"}]}]}]}