{"title":"java exception","date":"2019-08-20T00:00:00.000Z","link":"post/java-exception","tags":["java"],"categories":["program"],"updated":"2019-08-20T00:00:00.000Z","content":"<p>Java 异常</p>\n<h2 id=\"Java-Exception\">Java Exception<a href=\"post/java-exception#Java-Exception\"></a></h2><h3 id=\"Introduction\">Introduction<a href=\"post/java-exception#Introduction\"></a></h3><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。<br>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。<br>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据。</li>\n<li>要打开的文件不存在。</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-<br>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li>\n</ul>\n<h3 id=\"Exception-Level\">Exception Level<a href=\"post/java-exception#Exception-Level\"></a></h3><p>所有的异常类是从 java.lang.Exception 类继承的子类。<br>Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。<br>Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。<br>Error 用来指示运行时环境发生的错误。<br>例如，JVM 内存溢出。一般地，程序不会从错误中恢复。<br>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p>\n<h3 id=\"Java-Built-in-Exceptions\">Java Built-in Exceptions<a href=\"post/java-exception#Java-Built-in-Exceptions\"></a></h3><p>ava 语言定义了一些异常类在 java.lang 标准包中。</p>\n<p>标准运行时异常类的子类是最常见的异常类。由于 java.lang 包是默认加载到所有的 Java 程序的，所以大部分从运行时异常类继承而来的异常都可以直接使用。</p>\n<p>Java 根据各个类库也定义了一些其他的异常，下面的表中列出了 Java 的非检查性异常。</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>异常</strong></th>\n<th style=\"text-align:left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ArithmeticException</td>\n<td style=\"text-align:left\">当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ArrayIndexOutOfBoundsException</td>\n<td style=\"text-align:left\">用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ArrayStoreException</td>\n<td style=\"text-align:left\">试图将错误类型的对象存储到一个对象数组时抛出的异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ClassCastException</td>\n<td style=\"text-align:left\">当试图将对象强制转换为不是实例的子类时，抛出该异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IllegalArgumentException</td>\n<td style=\"text-align:left\">抛出的异常表明向方法传递了一个不合法或不正确的参数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IllegalMonitorStateException</td>\n<td style=\"text-align:left\">抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IllegalStateException</td>\n<td style=\"text-align:left\">在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IllegalThreadStateException</td>\n<td style=\"text-align:left\">线程没有处于请求操作所要求的适当状态时抛出的异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IndexOutOfBoundsException</td>\n<td style=\"text-align:left\">指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NegativeArraySizeException</td>\n<td style=\"text-align:left\">如果应用程序试图创建大小为负的数组，则抛出该异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NullPointerException</td>\n<td style=\"text-align:left\">当应用程序试图在需要对象的地方使用 <code>null</code> 时，抛出该异常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NumberFormatException</td>\n<td style=\"text-align:left\">当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SecurityException</td>\n<td style=\"text-align:left\">由安全管理器抛出的异常，指示存在安全侵犯。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringIndexOutOfBoundsException</td>\n<td style=\"text-align:left\">此异常由 <code>String</code> 方法抛出，指示索引或者为负，或者超出字符串的大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UnsupportedOperationException</td>\n<td style=\"text-align:left\">当不支持请求的操作时，抛出该异常。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>下面的表中列出了 Java 定义在 java.lang 包中的检查性异常类。</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>异常</strong></th>\n<th style=\"text-align:left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ClassNotFoundException</td>\n<td style=\"text-align:left\">应用程序试图加载类时，找不到相应的类，抛出该异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CloneNotSupportedException</td>\n<td style=\"text-align:left\">当调用 <code>Object</code> 类中的 <code>clone</code> 方法克隆对象，但该对象的类无法实现 <code>Cloneable</code> 接口时，抛出该异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IllegalAccessException</td>\n<td style=\"text-align:left\">拒绝访问一个类的时候，抛出该异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InstantiationException</td>\n<td style=\"text-align:left\">当试图使用 <code>Class</code> 类中的 <code>newInstance</code> 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InterruptedException</td>\n<td style=\"text-align:left\">一个线程被另一个线程中断，抛出该异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NoSuchFieldException</td>\n<td style=\"text-align:left\">请求的变量不存在</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NoSuchMethodException</td>\n<td style=\"text-align:left\">请求的方法不存在</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"Exception-Functions\">Exception Functions<a href=\"post/java-exception#Exception-Functions\"></a></h3><p>下面的列表是 Throwable 类的主要方法:</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>序号</strong></th>\n<th style=\"text-align:left\"><strong>方法及说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>public String getMessage()</strong> 返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>public Throwable getCause()</strong> 返回一个Throwable 对象代表异常原因。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>public String toString()</strong> 使用getMessage()的结果返回类的串级名字。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>public void printStackTrace()</strong> 打印toString()结果和栈层次到System.err，即错误输出流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>public StackTraceElement [] getStackTrace()</strong> 返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><strong>public Throwable fillInStackTrace()</strong> 用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"Catch-Exception\">Catch Exception<a href=\"post/java-exception#Catch-Exception\"></a></h3><p>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。</p>\n<p>try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(ExceptionName e1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//Catch 块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。<br>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<p>下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件名 : ExcepTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExcepTest</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Access element three :\"</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Exception thrown  :\"</span> + e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Out of the block\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>以上代码编译运行输出结果如下：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">Out of the block</span><br></pre></td></tr></table></div></figure>\n<hr>\n<h4 id=\"多重捕获块\">多重捕获块<a href=\"post/java-exception#多重捕获块\"></a></h4><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。<br>多重捕获块的语法如下所示：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>上面的代码段包含了 3 个 catch块。<br>可以在 try 语句后面添加任意数量的 catch 块。<br>如果保护代码中发生异常，异常被抛给第一个 catch 块。<br>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。<br>如果不匹配，它会被传递给第二个 catch 块。<br>如此，直到异常被捕获或者通过所有的 catch 块。</p>\n<p><code>实例</code></p>\n<p>该实例展示了怎么使用多重 try/catch。<br><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    file = <span class=\"keyword\">new</span> FileInputStream(fileName);</span><br><span class=\"line\">    x = (<span class=\"keyword\">byte</span>) file.read();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(FileNotFoundException f) &#123; <span class=\"comment\">// Not valid!</span></span><br><span class=\"line\">    f.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(IOException i) &#123;</span><br><span class=\"line\">    i.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure></p>\n<h3 id=\"throws-throw-关键字：\">throws/throw 关键字：<a href=\"post/java-exception#throws-throw-关键字：\"></a></h3><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。<br>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。<br>下面方法的声明抛出一个 RemoteException 异常：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">className</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deposit</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RemoteException();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。<br>例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：<br><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">className</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">withdraw</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException,</span></span><br><span class=\"line\"><span class=\"function\">                              InsufficientFundsException</span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure></p>\n<h3 id=\"finally关键字\">finally关键字<a href=\"post/java-exception#finally关键字\"></a></h3><p>finally 关键字用来创建在 try 代码块后面执行的代码块。<br>无论是否发生异常，finally 代码块中的代码总会被执行。<br>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。<br>finally 代码块出现在 catch 代码块最后，语法如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p><code>实例</code></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ExcepTest.java 文件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExcepTest</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"Access element three :\"</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"Exception thrown  :\"</span> + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">       a[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"First element value: \"</span> +a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"The finally statement is executed\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: <span class=\"number\">3</span></span><br><span class=\"line\">First element value: <span class=\"number\">6</span></span><br><span class=\"line\">The <span class=\"keyword\">finally</span> statement is executed</span><br></pre></td></tr></table></div></figure>\n<p>注意下面事项：</p>\n<ul>\n<li>catch 不能独立于 try 存在。</li>\n<li>在 try/catch 后面添加 finally 块并非强制性要求的。</li>\n<li>try 代码后不能既没 catch 块也没 finally 块。</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<h3 id=\"声明自定义异常\">声明自定义异常<a href=\"post/java-exception#声明自定义异常\"></a></h3><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类。</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n<p>可以像下面这样定义自己的异常类：<br><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123; &#125;</span><br></pre></td></tr></table></div></figure></p>\n<p>只继承Exception 类来创建的异常类是检查性异常类。<br>下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。<br>一个异常类和其它任何类一样，包含有变量和方法。</p>\n<p><code>实例</code></p>\n<p>以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件名InsufficientFundsException.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//自定义异常类，继承Exception类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsufficientFundsException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> amount;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InsufficientFundsException</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.amount = amount;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getAmount</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>为了展示如何使用我们自定义的异常类，<br>在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件名称 CheckingAccount.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//此类模拟银行账户</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckingAccount</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//balance为余额，number为卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> balance;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CheckingAccount</span><span class=\"params\">(<span class=\"keyword\">int</span> number)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.number = number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：存钱</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deposit</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      balance += amount;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：取钱</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">withdraw</span><span class=\"params\">(<span class=\"keyword\">double</span> amount)</span> <span class=\"keyword\">throws</span></span></span><br><span class=\"line\"><span class=\"function\">                              InsufficientFundsException</span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(amount &lt;= balance)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         balance -= amount;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">double</span> needs = amount - balance;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InsufficientFundsException(needs);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回余额</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getBalance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回卡号</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumber</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名称 BankDemo.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankDemo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String [] args)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">      CheckingAccount c = <span class=\"keyword\">new</span> CheckingAccount(<span class=\"number\">101</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Depositing $500...\"</span>);</span><br><span class=\"line\">      c.deposit(<span class=\"number\">500.00</span>);</span><br><span class=\"line\">      <span class=\"keyword\">try</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"\\nWithdrawing $100...\"</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">100.00</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"\\nWithdrawing $600...\"</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">600.00</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(InsufficientFundsException e)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Sorry, but you are short $\"</span></span><br><span class=\"line\">                                  + e.getAmount());</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Depositing $<span class=\"number\">500</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $<span class=\"number\">100</span>...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $<span class=\"number\">600</span>...</span><br><span class=\"line\">Sorry, but you are <span class=\"keyword\">short</span> $<span class=\"number\">200.0</span></span><br><span class=\"line\">InsufficientFundsException</span><br><span class=\"line\">        at CheckingAccount.withdraw(CheckingAccount.java:<span class=\"number\">25</span>)</span><br><span class=\"line\">        at BankDemo.main(BankDemo.java:<span class=\"number\">13</span>)</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"通用异常\">通用异常<a href=\"post/java-exception#通用异常\"></a></h3><p>在Java中定义了两种类型的异常和错误。</p>\n<ul>\n<li><strong>JVM(Java**</strong>虚拟机<strong>**)</strong> <strong>异常：</strong>由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>\n<li><strong>程序级异常：</strong>由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>\n</ul>\n","prev":{"title":"Java basic grammar","link":"post/Java-basic-grammar"},"next":{"title":"HTTP2","link":"post/HTTP2"},"plink":"https://spaco.github.io/post/java-exception/","toc":[{"title":"Java Exception","id":"Java-Exception","index":"1","children":[{"title":"Introduction","id":"Introduction","index":"1.1"},{"title":"Exception Level","id":"Exception-Level","index":"1.2"},{"title":"Java Built-in Exceptions","id":"Java-Built-in-Exceptions","index":"1.3"},{"title":"Exception Functions","id":"Exception-Functions","index":"1.4"},{"title":"Catch Exception","id":"Catch-Exception","index":"1.5","children":[{"title":"多重捕获块","id":"多重捕获块","index":"1.5.1"}]},{"title":"throws/throw 关键字：","id":"throws-throw-关键字：","index":"1.6"},{"title":"finally关键字","id":"finally关键字","index":"1.7"},{"title":"声明自定义异常","id":"声明自定义异常","index":"1.8"},{"title":"通用异常","id":"通用异常","index":"1.9"}]}]}