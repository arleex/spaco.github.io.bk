{"title":"Build Kafka with docker-compose","date":"2018-10-05T00:00:00.000Z","slug":"MQ-build-Kafka-with-docker-compose","tags":["MQ-kafka"],"categories":["program"],"updated":"2019-01-03T03:08:07.239Z","content":"<h2 id=\"Build-Kafka-with-docker-compose\"><a href=\"#Build-Kafka-with-docker-compose\" class=\"headerlink\" title=\"Build Kafka with docker-compose\"></a>Build Kafka with docker-compose</h2><p><a href=\"http://kafka.apache.org/\" target=\"_blank\" rel=\"noopener\">Kafka</a>是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka为处理实时数据提供一个统一、高吞吐、低延迟的平台。其持久化层本质上是一个“按照分布式事务日志架构的大规模发布/订阅消息队列”，这使它作为企业级基础设施来处理流式数据非常有价值。此外，Kafka可以通过Kafka Connect连接到外部系统（用于数据输入/输出），并提供了Kafka Streams——一个Java流式处理库 (计算机)</p>\n<p>Kafka是一个分布式的、高吞吐量、高可扩展性的消息系统。Kafka 基于发布/订阅模式，通过消息解耦，使生产者和消费者异步交互，无需彼此等待。Ckafka 具有数据压缩、同时支持离线和实时数据处理等优点，适用于日志压缩收集、监控数据聚合等场景</p>\n<h3 id=\"precondition\"><a href=\"#precondition\" class=\"headerlink\" title=\"precondition\"></a>precondition</h3><ul>\n<li><p>kafka</p>\n</li>\n<li><p>kafka-manager</p>\n</li>\n<li><p>zookeeper</p>\n<p><code>本次测试 docker 已安装kafka zookeeper kafaka-manager,不讲述具体安装流程，如何安装查看结尾docker-compose.yml既可</code></p>\n</li>\n</ul>\n<h3 id=\"关键名词\"><a href=\"#关键名词\" class=\"headerlink\" title=\"关键名词\"></a>关键名词</h3><ul>\n<li>broker：kafka集群包含一个或者多个服务器，服务器就称作broker</li>\n<li>producer：负责发布消息到broker</li>\n<li>consumer：消费者，从broker获取消息</li>\n<li>topic：发布到kafka集群的消息类别。</li>\n<li>partition：每个topic划分为多个partition。</li>\n<li>group：每个partition分为多个group</li>\n</ul>\n<h3 id=\"可用性测试\"><a href=\"#可用性测试\" class=\"headerlink\" title=\"可用性测试\"></a>可用性测试</h3><p>   后续bash: –zookeeper ZookeeperName ： ZookeeperName指的是本地zookeeper的名字</p>\n<ol>\n<li><p>进入指定kafka容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose <span class=\"built_in\">exec</span> kafka bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建topic</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd KAFKA_HOME/bin/</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/kafka_2.11-2.0.1/bin/</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic X</span><br><span class=\"line\"><span class=\"comment\"># Created topic \"send-register-sms\".</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看创建的topic</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看zookeeper topics</span></span><br><span class=\"line\">kafka-topics.sh --list --zookeeper zookeeper:2181</span><br><span class=\"line\"><span class=\"comment\"># 查看某个topic</span></span><br><span class=\"line\">kafka-topics.sh --zookeeper zookeeper:2181 --describe --topic send-register-sms</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发送信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer.sh --broker-list localhost:9092 --topic=x</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">\"phone\"</span>:<span class=\"string\">\"17626041111\"</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新窗口接收信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd KAFKA_HOME/bin/</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/kafka_2.11-2.0.1/bin/</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --from-beginning --topic x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当出现发送的消息  success~</span></span><br><span class=\"line\">&#123;<span class=\"string\">\"phone\"</span>:<span class=\"string\">\"17626041111\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p> 这个时候每次断开，再次bash进入消费的时候，会拉取所有的消息，而我们需要获取从断开点之后创建的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --from-beginning --topic <span class=\"built_in\">test</span> --consumer-property group.id=group1</span><br></pre></td></tr></table></figure>\n<p><code>消费组</code></p>\n</li>\n</ol>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><ul>\n<li><a href=\"https://tomoyadeng.github.io/blog/2018/06/02/kafka-cluster-in-docker/index.html\" target=\"_blank\" rel=\"noopener\">使用Docker快速搭建Kafka开发环境</a></li>\n<li><a href=\"http://qimingyu.com/2018/06/30/Kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E7%9A%84%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">kafka-python重复消费的问题</a></li>\n<li><a href=\"https://blog.csdn.net/camel84/article/details/82861053\" target=\"_blank\" rel=\"noopener\">kafka系列-进阶篇之消费组</a></li>\n<li><a href=\"http://www.uml.org.cn/python/201801092.asp\" target=\"_blank\" rel=\"noopener\">Python操作分布式流处理系统Kafka</a></li>\n<li></li>\n</ul>\n<h3 id=\"QAQ\"><a href=\"#QAQ\" class=\"headerlink\" title=\"QAQ\"></a>QAQ</h3><ol>\n<li><p>WARN [Producer clientId=console-producer] Connection to node -1 could not be established. Broker may not be available. (org.apache.kafka.clients.NetworkClient)</p>\n<p><code>docker-compose.yml kafka设置的 KAFKA_ADVERTISED_HOST_NAME 问题，改成 bash: ipconfig getifaddr en0  显示的ip值即可</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REAL_IP = ipconfig getifaddr en0</span><br><span class=\"line\">kafka </span><br><span class=\"line\">\tKAFKA_ADVERTISED_HOST_NAME: REAL_IP</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置后 rebuild kafka 显示 kafka uses an image, skipping  (已经把zookeeper kafka-manager 关闭)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## force create</span></span><br><span class=\"line\">docker-compose up -d --force-recreate kafka</span><br><span class=\"line\">docker-compose up -d --force-recreate zookeeper</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose up -d kafka zookeeper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地连接不用的wifi 导致ip变化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose stop kafka zookeeper</span><br><span class=\"line\">docker-compose rm kafka zookeeper</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose up -d --force-recreate kafka</span><br><span class=\"line\">docker-compose up -d --force-recreate zookeeper</span><br><span class=\"line\">docker-compose up -d kafka zookeeper</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>WARN [Consumer clientId=consumer-1, groupId=group1] 1 partitions have leader brokers without a matching listener, including [test-0] (org.apache.kafka.clients.NetworkClient)</p>\n</li>\n</ol>\n<h3 id=\"Remarks\"><a href=\"#Remarks\" class=\"headerlink\" title=\"Remarks\"></a>Remarks</h3><ul>\n<li><p>group_id 不需要配置，用户确定名称即可</p>\n</li>\n<li><p>docker-compose.yml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### Zookeeper ################################################</span></span><br><span class=\"line\">    zookeeper:</span><br><span class=\"line\">      image: wurstmeister/zookeeper</span><br><span class=\"line\">      container_name: zookeeper</span><br><span class=\"line\">      restart: always</span><br><span class=\"line\">      ports:</span><br><span class=\"line\">        - <span class=\"string\">\"2181:2181\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Kafka ################################################    </span></span><br><span class=\"line\">    kafka:</span><br><span class=\"line\">      image: wurstmeister/kafka</span><br><span class=\"line\">      container_name: kafka</span><br><span class=\"line\">      ports:</span><br><span class=\"line\">        - <span class=\"string\">\"9092:9092\"</span></span><br><span class=\"line\">      environment:</span><br><span class=\"line\">        KAFKA_ADVERTISED_HOST_NAME: 192.168.1.112</span><br><span class=\"line\">        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - /var/run/docker.sock:/var/run/docker.sock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Kafka-manager ################################################ </span></span><br><span class=\"line\">    kafka-manager:</span><br><span class=\"line\">      image: sheepkiller/kafka-manager                </span><br><span class=\"line\">      ports:  </span><br><span class=\"line\">        - <span class=\"string\">\"9003:9000\"</span>     </span><br><span class=\"line\">      environment:</span><br><span class=\"line\">        ZK_HOSTS: zookeeper:2181</span><br><span class=\"line\">        APPLICATION_SECRET: <span class=\"string\">\"random-secret\"</span></span><br><span class=\"line\">        KAFKA_MANAGER_AUTH_ENABLED: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">        KAFKA_MANAGER_USERNAME: <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        KAFKA_MANAGER_PASSWORD: <span class=\"string\">\"secret\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>drwxr-xr-x@  26 ashe  staff   832B Dec  6 20:40 cache</p>\n","prev":{"title":"MQ sketch","slug":"MQ-sketch"},"next":{"title":"Build kafka application with python","slug":"MQ-build-kafka-application-with-python"},"link":"https://spaco.github.io/post/MQ-build-Kafka-with-docker-compose/","toc":[{"title":"Build Kafka with docker-compose","id":"Build-Kafka-with-docker-compose","index":"1","children":[{"title":"precondition","id":"precondition","index":"1.1"},{"title":"关键名词","id":"关键名词","index":"1.2"},{"title":"可用性测试","id":"可用性测试","index":"1.3"},{"title":"reference","id":"reference","index":"1.4"},{"title":"QAQ","id":"QAQ","index":"1.5"},{"title":"Remarks","id":"Remarks","index":"1.6"}]}]}